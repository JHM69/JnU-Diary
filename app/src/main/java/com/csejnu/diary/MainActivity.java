package com.csejnu.diary;import android.Manifest;import android.annotation.SuppressLint;import android.content.BroadcastReceiver;import android.content.Intent;import android.content.res.TypedArray;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.provider.MediaStore;import android.util.Log;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.ExpandableListView;import android.widget.TextView;import androidx.annotation.ColorInt;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.core.content.ContextCompat;import androidx.fragment.app.Fragment;import com.csejnu.diary.Activity.AddEntryActivity;import com.csejnu.diary.Adapter.ExpandableListAdapter;import com.csejnu.diary.Fragments.Department;import com.karumi.dexter.Dexter;import com.karumi.dexter.MultiplePermissionsReport;import com.karumi.dexter.PermissionToken;import com.karumi.dexter.listener.PermissionRequest;import com.karumi.dexter.listener.multi.MultiplePermissionsListener;import com.yarolegovich.slidingrootnav.SlidingRootNav;import com.yarolegovich.slidingrootnav.SlidingRootNavBuilder;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Objects;public class MainActivity extends AppCompatActivity {    public static MenuInflater menuInflater;    @SuppressLint("StaticFieldLeak")    public static AppCompatActivity activity;    @SuppressLint("StaticFieldLeak")    public static TextView rewardTv;    @SuppressLint("StaticFieldLeak")    public static TextView username;    public static Fragment mCurrentFragment;    @SuppressLint("StaticFieldLeak")    public static Toolbar toolbarMain;    public static MenuItem add_post;    public static MenuItem search_data;    private final boolean mState = true;    private final boolean mStateForum = false;    private final List<MediaStore.Images> imagesList = new ArrayList<>();    ExpandableListView expandableListView;    ExpandableListAdapter expandableListAdapter;    List<String> expandableListTitle;    HashMap<String, List<String>> expandableListDetail;    private SlidingRootNav slidingRootNav;    private BroadcastReceiver mRegistrationBroadcastReceiver;    private Intent resultIntent;    private boolean validate;    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onStop() {        super.onStop();    }    @Override    public void onBackPressed() {    }    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbarMain = findViewById(R.id.toolbar);        toolbarMain.setTitle("JnU Diary 2020-21");        toolbarMain.setSubtitle("");        setSupportActionBar(toolbarMain);        Window window = this.getWindow();        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);        window.setStatusBarColor(ContextCompat.getColor(getApplicationContext(), R.color.colorAccent));        try {        } catch (Exception e) {            Log.e("Error", e.getMessage());        }        mCurrentFragment = new Department("কম্পিউটার সায়েন্স এন্ড ইঞ্জিনিয়ারিং বিভাগ");        askPermission();        slidingRootNav = new SlidingRootNavBuilder(this)                .withToolbarMenuToggle(toolbarMain)                .withMenuOpened(false)                .withContentClickableWhenMenuOpened(false)                .withSavedState(savedInstanceState)                .withMenuLayout(R.layout.activity_main_drayer)                .inject();        showFragment(new Department("কম্পিউটার সায়েন্স এন্ড ইঞ্জিনিয়ারিং বিভাগ"));        expandableListView = findViewById(R.id.list_view);        expandableListDetail = getAllData();        expandableListTitle = new ArrayList<String>(expandableListDetail.keySet());        expandableListAdapter = new ExpandableListAdapter(this, expandableListTitle, expandableListDetail);        expandableListView.setAdapter(expandableListAdapter);        expandableListView.setOnGroupExpandListener(new ExpandableListView.OnGroupExpandListener() {            @Override            public void onGroupExpand(int groupPosition) {            }        });        expandableListView.setOnGroupCollapseListener(new ExpandableListView.OnGroupCollapseListener() {            @Override            public void onGroupCollapse(int groupPosition) {            }        });        expandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {            @Override            public boolean onChildClick(ExpandableListView parent, View v,                                        int groupPosition, int childPosition, long id) {                showFragment(new Department(Objects.requireNonNull(expandableListDetail.get(                        expandableListTitle.get(groupPosition))).get(                        childPosition)));                slidingRootNav.closeMenu(true);                return false;            }        });    }    private HashMap<String, List<String>> getAllData() {        HashMap<String, List<String>> expandableListDetail = new HashMap<String, List<String>>();        List<String> biggan_onushod = Arrays.asList(getResources().getStringArray(R.array.biggan_onushod));        List<String> samajil_biggan_onushod = Arrays.asList(getResources().getStringArray(R.array.samajil_biggan_onushod));        List<String> kola_onushod = Arrays.asList(getResources().getStringArray(R.array.kola_onushod));        List<String> bussiness_studies_onushod = Arrays.asList(getResources().getStringArray(R.array.bussiness_studies_onushod));        List<String> aiin_onushod = Arrays.asList(getResources().getStringArray(R.array.aiin_onushod));        List<String> life_and_earth_science_onushod = Arrays.asList(getResources().getStringArray(R.array.life_and_earth_science_onushod));        List<String> doptor_somuh = Arrays.asList(getResources().getStringArray(R.array.doptor_somuh));        expandableListDetail.put("বিজ্ঞান অনুষদ", biggan_onushod);        expandableListDetail.put("সামাজিক বিজ্ঞান অনুষদ", samajil_biggan_onushod);        expandableListDetail.put("কলা অনুষদ", kola_onushod);        expandableListDetail.put("বিজনেস স্টাডিজ অনুষদ", bussiness_studies_onushod);        expandableListDetail.put("আইন অনুষদ", aiin_onushod);        expandableListDetail.put("লাইফ এন্ড আর্থ সায়েন্স অনুষদ", life_and_earth_science_onushod);        expandableListDetail.put("দপ্তর সমূহ", doptor_somuh);        return expandableListDetail;    }    private void askPermission() {        Dexter.withActivity(this)                .withPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE,                        Manifest.permission.READ_EXTERNAL_STORAGE                )                .withListener(new MultiplePermissionsListener() {                    @Override                    public void onPermissionsChecked(MultiplePermissionsReport report) {                        if (report.isAnyPermissionPermanentlyDenied()) {                            //Toasty.info(MainActivity.this, "You have denied some permissions permanently, if the app force close try granting permission from settings.", Toasty.LENGTH_LONG,true).show();                        }                    }                    @Override                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {                        token.continuePermissionRequest();                    }                }).check();    }    @NonNull    private String[] loadScreenTitles() {        return getResources().getStringArray(R.array.onushodList);    }    private Drawable[] loadScreenIcons() {        TypedArray ta = getResources().obtainTypedArray(R.array.doptor_somuh);        Drawable[] icons = new Drawable[ta.length()];        for (int i = 0; i < ta.length(); i++) {            int id = ta.getResourceId(i, 0);            if (id != 0) {                icons[i] = ContextCompat.getDrawable(this, id);            }        }        ta.recycle();        return icons;    }    @ColorInt    private int color() {        return ContextCompat.getColor(this, R.color.colorAccent);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        menuInflater = getMenuInflater();        menuInflater.inflate(R.menu.options, menu);        add_post = menu.findItem(R.id.action_new);        search_data = menu.findItem(R.id.action_search);        return super.onCreateOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.action_new:                startActivity(new Intent(getApplicationContext(), AddEntryActivity.class));                return true;            default:                return super.onOptionsItemSelected(item);        }    }    public void showFragment(Fragment fragment) {        getSupportFragmentManager().beginTransaction()                .replace(R.id.container, fragment)                .commit();    }}